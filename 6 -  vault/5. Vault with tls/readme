### create read-secret.hcl

```
path "secret/data/cipher" {
  policy = "read"
}
```

### create create-token.hcl

```
path "auth/token/create/read-secret" {
	policy = "write"
}
```
### store policies in vault

logged in as root (or close enough), write the policies

vault policy write read-secret read-secret.hcl

vault policy write create-token create-token.hcl

### create a named token role... thingy

vault write auth/token/roles/read-secret allowed_policies=read-secret

_Note to self: find out how to enforce better security on the token/roles thing, i.e., require response-wrapping, a short TTL and modest number of uses (e.g., 2 or 3)._

## configure [auth/cert backend](https://www.vaultproject.io/docs/auth/cert.html)

The `cert` authentication backend has to be enabled (thanks to [saurabhweb](https://github.com/saurabhweb) for reminding us):

vault auth enable cert

Prerequisites include obtaining or [creating the certificates](https://jamielinux.com/docs/openssl-certificate-authority/). If you're unfamiliar with this, it will keep you busy for a while, so clear your schedule.

With your certificates ready to go, 
#-------------------------------------------------------------
First create a config file to facilitate experimentation; please change the values in the [ dn ] section and eg. call the file cert.conf:
#-------------------------------------------------------------

[ req ]
default_bits = 2048
prompt = no
encrypt_key = yes
default_md = sha256
distinguished_name = dn

[ dn ]
C = ID
ST= State or Province Name (full name)
L = Locality Name (eg, city)
O = Personal
emailAddress= you@yourdomain.com
0.CN= Your Name
#-------------------------------------------------------------
Now generate a key and certificate with passphrase using this config file (I will use th3p@ss as the passphrase throughout this text):

openssl req -config cert.conf -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days 14
```
vault write auth/cert/certs/web display_name=web policies=create-token \
	certificate=@cert.pem 
```
Now we have a user (in a manner of speaking) who can log in and create authentication tokens with which the bearer can read the secret. 

## authenticate via TLS

Let's see if it works.
```
vault login -method=cert -client-cert=cert.pem -client-key=key.pem
```

```
Key                            Value
---                            -----
token                          ca07764d-cc63-fdb1-5429-b65597f61277
token_accessor                 94c12ef3-b58e-c79a-a35c-8d734950dfcc
token_duration                 768h
token_renewable                true
token_policies                 [create-token default]
[etc]

```
Yay! Try reading the secret:

vault read secret/data
```
Error reading secret/data: Error making API request.

URL: GET https://vault.example.org:8200/v1/secret/data/cipher
Code: 403. Errors:

* permission denied
```

As expected, very good. Now get a token that _can_ read the secret.

## get a token for reading the secret

vault token create -role=read-secret

```
Key            	Value
---            	-----
token          	ef2fb0d1-1644-937f-5326-3c6270abc3ba
token_accessor 	522c0a9d-7897-a670-e511-650d37ea6d20
token_duration 	768h0m0s
token_renewable	true
token_policies 	[default read-cipher]
```

_update/note-to-self_: with earlier versions of Vault, the above command _used to_ work in this situation, but not 
any more. Now you get access denied. I have no clue as to why (feature? bug?), but what does work is to use `curl` and make sure you POST:

 ```
 curl -s -H X-Vault-Token:ef2fb0d1-1644-937f-5326-3c6270abc3ba -X POST \ 
 	$VAULT_ADDR/v1/auth/token/create/read-cipher|jq .auth.client_token
 
 ```

Authenticate with the token we just obtained:

**`vault login ef2fb0d1-1644-937f-5326-3c6270abc3ba`**
```
Key            	Value
---            	-----
token          	ef2fb0d1-1644-937f-5326-3c6270abc3ba
token_accessor 	522c0a9d-7897-a670-e511-650d37ea6d20
token_duration 	768h0m0s
token_renewable	true
token_policies 	[default read-cipher]
```
and try reading the cipher, so we can encrypt/decrypt things our database:

**`vault read secret/data/cipher`**

```
Key             	Value
---             	-----
refresh_interval	768h0m0s
cipher          	b862600aaeba7c4ccd74006d2e616083ffb7031a3b088e743080bcf32e90f3b4
```


